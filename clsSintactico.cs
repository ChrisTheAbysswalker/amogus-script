using System;
using System.Collections.Generic;
using System.Data;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Compilador
{
	internal class clsSintactico
	{
		List<string> lstTokensLex = new List<string>();
		List<string> lstErrores = new List<string>();
		List<string> lstLineas = new List<string>();

		public void GetTokens(ref DataTable tabla)
		{
			foreach (DataRow row in tabla.Rows)
			{
				lstTokensLex.Add(row[0].ToString());
				lstLineas.Add(row[2].ToString());
			};
		}

		public void GetLista(ref List<string> lista) => lstTokensLex.AddRange(lista);
		public void Sintactico()
		{
			//variables
			int[,] sintactico = {{  7,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,320,1,320,320,320,6,13,37,17,320,320,29,33,38,44,24,10    }   ,
{   303,303,303,303,303,303,303,303,303,303,303,303,303,303,2,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303   }   ,
{   3,3,3,3,304,304,304,304,304,304,304,304,304,304,2,304,304,304,304,3,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304 }   ,
{   305,305,305,305,2,2,2,2,4,4,4,4,4,305,305,3,305,305,305,305,4,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305   }   ,
{   5,5,5,5,304,304,304,304,304,304,304,304,304,304,4,304,304,304,304,5,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304 }   ,
{   306,306,306,306,4,4,4,4,306,306,306,306,306,306,306,5,306,306,306,306,306,306,306,306,306,600,306,306,306,306,306,306,2,2,306,306,306,306,306,306   }   ,
{   307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,307,604,307,307,307,307,307,307,307,307,307,307,307,307,307,307 }   ,
{   308,308,308,308,308,308,308,308,308,308,308,308,308,8,7,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308,308 }   ,
{   9,9,9,9,304,304,304,304,304,304,304,304,304,304,50,304,304,304,304,9,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304    }   ,
{   306,306,306,306,8,8,8,8,306,306,306,306,306,306,306,306,306,601,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306 }   ,
{   309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,11,11,11,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309,309    }   ,
{   12,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310  }   ,
{   311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,11,602,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311  }   ,
{   14,14,14,14,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,14,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304  }   ,
{   305,305,305,305,13,13,13,13,15,15,15,15,15,305,305,305,305,305,305,305,13,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305   }   ,
{   16,16,16,16,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,16,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304  }   ,
{   306,306,306,306,15,15,15,15,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,306,603,306,306,306,306,306,306,306,306,306,306,306,306,306 }   ,
{   18,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310  }   ,
{   303,303,303,303,303,303,303,303,303,303,303,303,303,303,19,303,303,605,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303  }   ,
{   20,312,312,312,312,312,312,312,312,312,312,312,312,312,312,23,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312,312   }   ,
{   313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,21,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313,313  }   ,
{   314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,22,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314,314  }   ,
{   315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,23,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315  }   ,
{   316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,316,612,316,316,316,316,316,316,316,316,316,316,316,316,316 }   ,
{   25,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310  }   ,
{   303,303,303,303,303,303,303,303,303,303,303,303,303,303,26,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303  }   ,
{   27,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310  }   ,
{   315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,28,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315  }   ,
{   311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,606,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311 }   ,
{   303,303,303,303,303,303,303,303,303,303,303,303,303,303,30,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303  }   ,
{   31,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310  }   ,
{   315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,32,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315  }   ,
{   311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,607,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311 }   ,
{   303,303,303,303,303,303,303,303,303,303,303,303,303,303,34,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303  }   ,
{   35,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,35,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317,317   }   ,
{   318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,36,34,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318   }   ,
{   311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,608,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311 }   ,
{   609,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310 }   ,
{   303,303,303,303,303,303,303,303,303,303,303,303,303,303,39,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303  }   ,
{   40,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310  }   ,
{   318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,43,41,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318   }   ,
{   319,42,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319  }   ,
{   315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,43,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315  }   ,
{   311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,610,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311 }   ,
{   303,303,303,303,303,303,303,303,303,303,303,303,303,303,45,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303,303  }   ,
{   46,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310,310  }   ,
{   318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,49,47,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318,318   }   ,
{   319,48,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319,319  }   ,
{   315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,49,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315,315  }   ,
{   311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,611,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311,311 }   ,
{   51,51,51,51,304,304,304,304,304,304,304,304,304,304,50,51,304,601,304,51,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304,304    }   ,
{   305,305,305,305,50,50,50,50,305,305,305,305,305,305,305,51,305,601,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305,305  }    };
			ClsPila Pila = new ClsPila();
			int cont = 0, col = 0, token = 0, estado = 0;
			string[] tokens = new string[lstTokensLex.Count];

			bool ifantes = false, cierreif = false;

			//variables que no se usaron mas q para calar cosas xd
			string tokens206 = "";
			int contador = 0;
			//

			//se guardan los tokens en el arreglo
			for (int i = 0; i < lstTokensLex.Count; i++)
			{
				tokens[i] = lstTokensLex[i].ToString();
			}

			//ERROR DE PROGRAM
			if (tokens[0] != "224")
			{ //Si el primer token no corresponde a la reservada Main se marca error directo
				lstErrores.Add("El programa debe de iniciar con amogus y su nombre");
			}
			// CONTAR CANTIDAD DE RESERVADAS DE LLAVES de cierre (no se usa realmente)
			for (int i = 0; i < lstTokensLex.Count; i++)
			{
				tokens206 = lstTokensLex[i].ToString().Trim();
				if (tokens206 == "221")
				{
					contador++;
				}
			}
			//LECTURA DE TOKENS SINTACTICO
			while (cont < lstTokensLex.Count)
			{
				token = Convert.ToInt32(tokens[cont].Trim()); //se toma un token del arreglo 

				if (token == 206) //SI LLEGA UN TOKEN DE END (DORMIR) se interpreta como llave que cierra
				{
					if (ifantes) //si habia un if antes se toma como un cierre de if
					{
						cierreif = true;
					}
					//
					//Si la pila no esta vacia
					if (!Pila.estavacia())
					{
						//
						if (Pila.Peek() == "604") //si es un else el tope de la pila
						{
							//
							if (cierreif) //si se esta cerrando un if se hace pop dos veces con el else
							{
								ifantes = false;
								cierreif = false;
								Pila.Pop();
								if (Pila.Peek() == "600")
								{
									Pila.Pop();
								}
							} // si no hay un if cerrando antes del else es un error
							else
							{
								Pila.Pop();
								lstErrores.Add("Esta poniendo un choice sin un condition anterior");
							}
							//
						}
						//
						else
						{
							if (Pila.Peek() == "600") // si el tope es un if se limpia la llave con pop
													  //y se marca un cierre de if directo y damos vuelta al while
							{
								Pila.Pop();
								cierreif = true;
								ifantes = false;
								cont++;
								continue;
							}
							//si es cualquier otro tope solo se hace pop sin problemas.
							Pila.Pop();
							cierreif = false;
							ifantes = false;
						}
					}
					//
					else // si la pila ya esta vacia se toma como un error de llaves de mas.
					{
						if (Pila.Size() == 0)
						{
							lstErrores.Add("Hay endit de mas");
						}

					}
					cont++;
					continue;
				}

				if (token >= 300)
				{   //Si el token ya era un error existente del lexico se evalua cual es y se imprime.
					switch (token)
					{
						case 401:
							lstErrores.Add("ERROR 401: Caracter NO Reconocido");
							break;
						case 402:
							lstErrores.Add("ERROR 402: Se Espera un '");
							break;
						case 403:
							lstErrores.Add("ERROR 403: Error en Numero");
							break;
						case 404:
							lstErrores.Add("ERROR 404: Se Espera un   +   o un  - ");
							break;
						case 405:
							lstErrores.Add("ERROR 405: Identificador Demaciado Largo");
							break;
					}
					cont++;
					continue;
				}
				//metodo columna y renglon matriz
				col = RecorrerColumna(token);
				estado = sintactico[estado, col];
				if (estado >= 300)
				{
					if (estado >= 600)
					{
						//SI ES RENGLON DE IF, ELSE, WHILE, PROGRAM
						if (estado == 600 || estado == 604 || estado == 603 || estado == 609 || estado == 612)
						{
							//SI LLEGA UN NUEVO RENGLON SE DESACTIVA EL BOOL DE QUE HABIA UN IF ANTES
							if (ifantes == true)
							{
								ifantes = false;
							}
							//ESTOS TOKENS CUENTAN COMO LLAVE QUE ABRE ASI QUE SE METE A LA PILA
							Pila.Push(estado.ToString());
						}
						estado = 0;
						//REINICIO DE ESTADO Y SE REEVALUA SI EL TOPE ERA UN RENGLON DE IF PARA DAR A ENTENDER QUE ES UN
						//IF ANTES
						if (Pila.Peek() == "600")
						{
							ifantes = true;
						}
					}
					//SI ES TOKEN DE ERROR SE MANDA EL TOKEN AL METODO DE ERRORES Y SE REINICIA EL ESTADO
					if (estado >= 300 && estado <= 330)
					{
						Errores(estado);
						estado = 0;
					}
					//Aumento de contador y continue al while
					cont++;
					continue;
				}
				cont++;
			}
			//si al finalizar el recorrido aun hay tokens en la pila es porque hace falta cerrar llaves
			if (!Pila.estavacia())
			{
				lstErrores.Add("Hace falta algun endit");
			}
		}
		private int RecorrerColumna(int token)
		{
			int[] estado = new int[] { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39 };
			int[] noToken = new int[] { 100, 101, 102, 103, 104, 105, 106, 107, 110, 111, 112, 113, 115, 124, 120, 121, 116, 119, 118, 126, 228, 200, 201, 202, 205, 205, 225, 221, 207, 209, 224, 210, 215, 214, 223, 222, 229, 230, 227, 226 };
			int indice = Array.IndexOf(noToken, token);
			int res = indice > -1 ? estado[indice] : 0;
			return res;
		}


		private void Errores(int token)
		{
			Dictionary<int, string> errores = new Dictionary<int, string>()
			{   { 303, "Se esperaba un '(' 0 ';'" },
				{ 304, "Se espera un var, cad o num"},
				{ 305, "Se espera Operador Aritmetico o Relacional"},
				{ 306, "Se espera Op. Aritmético"},
				{ 307, "Se espera la palabra through"},
				{ 308, "Se espera un signo '='"},
				{ 309, "Se espera un tipo de variable (text, decimal, number)"},
				{ 310, "Se espera una variable"},
				{ 311, "Se espera ',' o ';'"},
				{ 312, "Se espera variable o ')'"},
				{ 313, "Se espera ':'"},
				{ 314, "Se espera number"},
				{ 315, "Se espers un ')'"},
				{ 316, "Se espera starit"},
				{ 317, "Se espera variable o cadena"},
				{ 318, "Se espera ')' o ','"},
				{ 319, "Se espera number"},
				{ 320, "Instruccion no reconocida"} };
			string mensajeError = errores.TryGetValue(token, out var mensaje) ? mensaje : "No se encontró ningún error";
			lstErrores.Add(mensajeError);
		}
		public List<string> GetErrores() => lstErrores;
	}
}
